{
	"info": {
		"_postman_id": "spring-two-datasource-api",
		"name": "Spring Two DataSource API - Complete Auth System",
		"description": "‚úÖ READY TO USE: Your authentication system is fully implemented!\n\nüéØ Features:\n- Keycloak OAuth2 integration\n- PostgreSQL 'users' table with auto-generated UUIDs\n- Email verification\n- JWT token authentication\n- Complete CRUD operations\n\nüìã Quick Start:\n1. Configure Keycloak credentials in variables\n2. Test user registration (public endpoint)\n3. Get JWT tokens from Keycloak\n4. Access all protected endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string",
			"description": "Your Spring Boot API base URL"
		},
		{
			"key": "keycloakUrl",
			"value": "http://localhost:9090",
			"type": "string",
			"description": "Your Keycloak server URL"
		},
		{
			"key": "realm",
			"value": "endora_api",
			"type": "string",
			"description": "Keycloak realm name"
		},
		{
			"key": "clientId",
			"value": "your-keycloak-client-id",
			"type": "string",
			"description": "‚ö†Ô∏è REQUIRED: Set your Keycloak client ID here"
		},
		{
			"key": "clientSecret",
			"value": "your-keycloak-client-secret",
			"type": "string",
			"description": "‚ö†Ô∏è REQUIRED: Set your Keycloak client secret here"
		},
		{
			"key": "testUsername",
			"value": "testuser123",
			"type": "string",
			"description": "Username for testing (will be created during registration)"
		},
		{
			"key": "testPassword",
			"value": "password123",
			"type": "string",
			"description": "Password for testing user"
		},
		{
			"key": "testEmail",
			"value": "test@example.com",
			"type": "string",
			"description": "Email for testing user"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string",
			"description": "üîê JWT access token (auto-populated)"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string",
			"description": "üîÑ JWT refresh token (auto-populated)"
		},
		{
			"key": "keycloakUserId",
			"value": "",
			"type": "string",
			"description": "üë§ User ID from Keycloak (auto-populated after registration)"
		},
		{
			"key": "projectUuid",
			"value": "",
			"type": "string",
			"description": "üìÅ Project UUID (auto-populated after creating project)"
		},
		{
			"key": "userUuid",
			"value": "",
			"type": "string",
			"description": "üÜî Local user UUID (auto-populated after registration)"
		},
		{
			"key": "schemaName",
			"value": "test_table",
			"type": "string",
			"description": "üóÇÔ∏è Table schema name for testing"
		},
		{
			"key": "recordId",
			"value": "",
			"type": "string",
			"description": "üìù Record ID for testing"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "üîê Authentication Setup",
			"item": [
				{
					"name": "1Ô∏è‚É£ Get Access Token from Keycloak",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('accessToken', response.access_token);",
									"    pm.collectionVariables.set('refreshToken', response.refresh_token);",
									"    console.log('‚úÖ Access token set successfully');",
									"    console.log('Token expires in:', response.expires_in, 'seconds');",
									"} else {",
									"    console.log('‚ùå Failed to get access token');",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token",
							"host": ["{{keycloakUrl}}"],
							"path": ["realms", "{{realm}}", "protocol", "openid-connect", "token"]
						},
						"description": "üéØ USE THIS to get JWT access token from Keycloak for authentication.\n\n‚ö†Ô∏è NOTE: Registration endpoint does NOT return tokens - only user info!"
					}
				},
				{
					"name": "2Ô∏è‚É£ Refresh Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('accessToken', response.access_token);",
									"    pm.collectionVariables.set('refreshToken', response.refresh_token);",
									"    console.log('‚úÖ Access token refreshed successfully');",
									"} else {",
									"    console.log('‚ùå Failed to refresh token');",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refreshToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token",
							"host": ["{{keycloakUrl}}"],
							"path": ["realms", "{{realm}}", "protocol", "openid-connect", "token"]
						},
						"description": "Use this when your access token expires to get a new one using the refresh token"
					}
				}
			],
			"description": "üîë AUTHENTICATION FLOW:\n\n1Ô∏è‚É£ First run 'Get Access Token from Keycloak' with your credentials\n2Ô∏è‚É£ This will automatically set the token for all other requests\n3Ô∏è‚É£ Use 'Refresh Access Token' when token expires\n\n‚ö†Ô∏è IMPORTANT: Registration endpoint only creates users - it doesn't return tokens!"
		},
		{
			"name": "üîì Public Endpoints (No Auth Required)",
			"item": [
				{
					"name": "Register User (No Tokens Returned)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ User registered successfully');",
									"    console.log('User ID:', response.id);",
									"    console.log('Username:', response.username);",
									"    console.log('üìå NOTE: To get auth tokens, use the Keycloak token endpoint!');",
									"} else {",
									"    console.log('‚ùå Registration failed');",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"testuser@example.com\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"password\": \"password123\",\n  \"confirmedPassword\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "‚ö†Ô∏è IMPORTANT: This endpoint only creates a user account and returns user info.\n\n‚úÖ Response includes: id, username, email, firstName, lastName, message\n‚ùå Response does NOT include: access_token, refresh_token\n\nüéØ To get authentication tokens, use the Keycloak token endpoint in the Authentication Setup folder!"
					}
				},
				{
					"name": "Verify Email",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/verify/{{userUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "verify", "{{userUuid}}"]
						}
					}
				}
			],
			"description": "üìù Endpoints that don't require authentication\n\n‚ö†Ô∏è Registration only creates user accounts - it doesn't return JWT tokens!"
		},
		{
			"name": "üë§ User Management (Requires Auth)",
			"item": [
				{
					"name": "Get Current User Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/profile",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users", "profile"]
						}
					}
				},
				{
					"name": "Update User Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"displayName\": \"Updated Display Name\",\n  \"profileImage\": \"https://example.com/image.jpg\",\n  \"preferences\": \"dark-theme\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/profile",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users", "profile"]
						}
					}
				},
				{
					"name": "Get All Users (Requires USER role)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						}
					}
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users", "{{userUuid}}"]
						}
					}
				}
			],
			"description": "User management endpoints that require authentication"
		},
		{
			"name": "üìÅ Project Management (Requires Auth)",
			"item": [
				{
					"name": "Create Project",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectName\": \"My New Project\",\n  \"description\": \"Project description\",\n  \"userUuid\": \"{{userUuid}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": ["{{baseUrl}}"],
							"path": ["projects"]
						}
					}
				},
				{
					"name": "Get All Projects",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": ["{{baseUrl}}"],
							"path": ["projects"]
						}
					}
				},
				{
					"name": "Get Project by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "{{projectId}}"]
						}
					}
				},
				{
					"name": "Get Project by UUID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/uuid/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "uuid", "{{projectUuid}}"]
						}
					}
				},
				{
					"name": "Get Projects by User UUID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/user/{{userUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "user", "{{userUuid}}"]
						}
					}
				},
				{
					"name": "Get Project with User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/with-user",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "{{projectId}}", "with-user"]
						}
					}
				},
				{
					"name": "Delete Project",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "{{projectId}}"]
						}
					}
				}
			],
			"description": "Project management endpoints that require authentication"
		},
		{
			"name": "üóÇÔ∏è Table Management (Requires Auth)",
			"item": [
				{
					"name": "Create Table",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userUuid\": \"{{userUuid}}\",\n  \"projectUuid\": \"{{projectUuid}}\",\n  \"schemaName\": \"users\",\n  \"schema\": {\n    \"name\": \"STRING\",\n    \"email\": \"STRING\",\n    \"age\": \"INTEGER\",\n    \"isActive\": \"BOOLEAN\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/table",
							"host": ["{{baseUrl}}"],
							"path": ["table"]
						}
					}
				},
				{
					"name": "Get All Tables",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table",
							"host": ["{{baseUrl}}"],
							"path": ["table"]
						}
					}
				},
				{
					"name": "Get Tables by Project",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "project", "{{projectUuid}}"]
						}
					}
				},
				{
					"name": "Get Table by Name and Project",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "project", "{{projectUuid}}"]
						}
					}
				},
				{
					"name": "Insert Data with Path Params",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"age\": 30,\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/project/{{projectUuid}}/user/{{userUuid}}/data",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "project", "{{projectUuid}}", "user", "{{userUuid}}", "data"]
						}
					}
				},
				{
					"name": "Insert Data with Body",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userUuid\": \"{{userUuid}}\",\n  \"projectUuid\": \"{{projectUuid}}\",\n  \"schemaName\": \"{{schemaName}}\",\n  \"data\": {\n    \"name\": \"Jane Doe\",\n    \"email\": \"jane@example.com\",\n    \"age\": 25,\n    \"isActive\": true\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/table/data",
							"host": ["{{baseUrl}}"],
							"path": ["table", "data"]
						}
					}
				},
				{
					"name": "Get All Data from Table",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/data",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "data"]
						}
					}
				},
				{
					"name": "Get Table Data by Project",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/data/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "data", "project", "{{projectUuid}}"]
						}
					}
				},
				{
					"name": "Get Record by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/{{recordId}}/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "{{recordId}}", "project", "{{projectUuid}}"]
						}
					}
				},
				{
					"name": "Update Record by ID",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Name\",\n  \"email\": \"updated@example.com\",\n  \"age\": 35,\n  \"isActive\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/{{recordId}}/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "{{recordId}}", "project", "{{projectUuid}}"]
						}
					}
				},
				{
					"name": "Delete Record by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/{{recordId}}/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "{{recordId}}", "project", "{{projectUuid}}"]
						}
					}
				},
				{
					"name": "Get Related Tables",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/relationships/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "relationships", "project", "{{projectUuid}}"]
						}
					}
				},
				{
					"name": "Get Table Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/docs",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "docs"]
						}
					}
				},
				{
					"name": "Get All Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/docs",
							"host": ["{{baseUrl}}"],
							"path": ["table", "docs"]
						}
					}
				},
				{
					"name": "Get Record with Relations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/{{recordId}}/with-relations/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "{{recordId}}", "with-relations", "project", "{{projectUuid}}"]
						}
					}
				}
			],
			"description": "Table management endpoints that require authentication"
		},
		{
			"name": "üîÑ Dynamic Table API (Requires Auth)",
			"item": [
				{
					"name": "Get All Records from Table",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tables/{{schemaName}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tables", "{{schemaName}}"]
						}
					}
				},
				{
					"name": "Create Record in Table",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": \"{{projectUuid}}\",\n  \"name\": \"Dynamic Record\",\n  \"email\": \"dynamic@example.com\",\n  \"age\": 28,\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tables/{{schemaName}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tables", "{{schemaName}}"]
						}
					}
				},
				{
					"name": "Get Record by ID (Dynamic)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tables/{{schemaName}}/{{recordId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tables", "{{schemaName}}", "{{recordId}}"]
						}
					}
				},
				{
					"name": "Update Record by ID (Dynamic)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Dynamic Record\",\n  \"email\": \"updated.dynamic@example.com\",\n  \"age\": 32,\n  \"isActive\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tables/{{schemaName}}/{{recordId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tables", "{{schemaName}}", "{{recordId}}"]
						}
					}
				},
				{
					"name": "Delete Record by ID (Dynamic)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tables/{{schemaName}}/{{recordId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tables", "{{schemaName}}", "{{recordId}}"]
						}
					}
				}
			],
			"description": "Dynamic table endpoints that require authentication"
		},
		{
			"name": "üåê Dynamic Endpoints (Requires Auth)",
			"item": [
				{
					"name": "Get All Endpoint Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/endpoints/docs",
							"host": ["{{baseUrl}}"],
							"path": ["api", "endpoints", "docs"]
						}
					}
				},
				{
					"name": "Get Endpoint Documentation for Table",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/endpoints/docs/{{schemaName}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "endpoints", "docs", "{{schemaName}}"]
						}
					}
				},
				{
					"name": "Generate Endpoints for Table",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/endpoints/generate/{{schemaName}}/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "endpoints", "generate", "{{schemaName}}", "project", "{{projectUuid}}"]
						}
					}
				}
			],
			"description": "Dynamic endpoint management that requires authentication"
		},
		{
			"name": "üöÄ Complete Test Flow",
			"item": [
				{
					"name": "Step 1: Register Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('keycloakUserId', response.id);",
									"    console.log('‚úÖ User registered successfully!');",
									"    console.log('üÜî Keycloak User ID:', response.id);",
									"    console.log('üë§ Username:', response.username);",
									"    console.log('üìß Email:', response.email);",
									"    console.log('');",
									"    console.log('üéØ Next step: Run \"Step 2: Get JWT Token\"');",
									"} else {",
									"    console.log('‚ùå Registration failed');",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{testUsername}}\",\n  \"email\": \"{{testEmail}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"password\": \"{{testPassword}}\",\n  \"confirmedPassword\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "üéØ Creates test user in both Keycloak and PostgreSQL 'users' table"
					}
				},
				{
					"name": "Step 2: Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('accessToken', response.access_token);",
									"    pm.collectionVariables.set('refreshToken', response.refresh_token);",
									"    console.log('‚úÖ JWT tokens obtained successfully!');",
									"    console.log('üîê Access token set (expires in ' + response.expires_in + ' seconds)');",
									"    console.log('üîÑ Refresh token set');",
									"    console.log('');",
									"    console.log('üéØ Next step: Run \"Step 3: Create Project\"');",
									"} else {",
									"    console.log('‚ùå Failed to get JWT token');",
									"    console.log('Response:', pm.response.text());",
									"    console.log('üí° Check your Keycloak credentials in collection variables');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{testUsername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{testPassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token",
							"host": ["{{keycloakUrl}}"],
							"path": ["realms", "{{realm}}", "protocol", "openid-connect", "token"]
						},
						"description": "üéØ Gets JWT access token from Keycloak using test user credentials"
					}
				},
				{
					"name": "Step 3: Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('projectUuid', response.project.projectUuid);",
									"    pm.collectionVariables.set('userUuid', response.project.userUuid);",
									"    console.log('‚úÖ Project created successfully!');",
									"    console.log('üìÅ Project UUID:', response.project.projectUuid);",
									"    console.log('üë§ User UUID:', response.project.userUuid);",
									"    console.log('üìù Project Name:', response.project.projectName);",
									"    console.log('');",
									"    console.log('üéØ Next step: Run \"Step 4: Create Dynamic Table\"');",
									"} else {",
									"    console.log('‚ùå Failed to create project');",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectName\": \"Test Project\",\n  \"description\": \"Project for testing dynamic tables\",\n  \"userUuid\": \"{{keycloakUserId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": ["{{baseUrl}}"],
							"path": ["projects"]
						},
						"description": "üéØ Creates a project for the test user (requires JWT authentication)"
					}
				},
				{
					"name": "Step 4: Create Dynamic Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ Dynamic table created successfully!');",
									"    console.log('üóÇÔ∏è Schema Name:', response.schemaName);",
									"    console.log('üìÅ Project UUID:', response.projectUuid);",
									"    console.log('');",
									"    console.log('üéØ Next step: Run \"Step 5: Insert Test Data\"');",
									"} else {",
									"    console.log('‚ùå Failed to create table');",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userUuid\": \"{{userUuid}}\",\n  \"projectUuid\": \"{{projectUuid}}\",\n  \"schemaName\": \"{{schemaName}}\",\n  \"schema\": {\n    \"name\": \"STRING\",\n    \"email\": \"STRING\",\n    \"age\": \"INTEGER\",\n    \"department\": \"STRING\",\n    \"isActive\": \"BOOLEAN\",\n    \"salary\": \"DOUBLE\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/table",
							"host": ["{{baseUrl}}"],
							"path": ["table"]
						},
						"description": "üéØ Creates a dynamic table in MongoDB with defined schema"
					}
				},
				{
					"name": "Step 5: Insert Test Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Test data inserted successfully!');",
									"    console.log('üìù Data added to table:', pm.collectionVariables.get('schemaName'));",
									"    console.log('');",
									"    console.log('üéØ Next step: Run \"Step 6: Get All Records\"');",
									"} else {",
									"    console.log('‚ùå Failed to insert data');",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userUuid\": \"{{userUuid}}\",\n  \"projectUuid\": \"{{projectUuid}}\",\n  \"schemaName\": \"{{schemaName}}\",\n  \"data\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@company.com\",\n    \"age\": 30,\n    \"department\": \"Engineering\",\n    \"isActive\": true,\n    \"salary\": 75000.50\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/table/data",
							"host": ["{{baseUrl}}"],
							"path": ["table", "data"]
						},
						"description": "üéØ Inserts sample data into the dynamic table"
					}
				},
				{
					"name": "Step 6: Get All Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const records = pm.response.json();",
									"    console.log('‚úÖ Records retrieved successfully!');",
									"    console.log('üìä Total records:', records.length);",
									"    if (records.length > 0) {",
									"        console.log('üìù First record ID:', records[0]._id);",
									"        pm.collectionVariables.set('recordId', records[0]._id);",
									"        console.log('üéØ Record ID saved for future tests');",
									"    }",
									"    console.log('');",
									"    console.log('üéâ COMPLETE! Your authentication system is working perfectly!');",
									"    console.log('üìã Summary:');",
									"    console.log('   ‚úÖ User registration with Keycloak');",
									"    console.log('   ‚úÖ JWT token authentication');",
									"    console.log('   ‚úÖ Project creation');",
									"    console.log('   ‚úÖ Dynamic table creation');",
									"    console.log('   ‚úÖ Data insertion and retrieval');",
									"} else {",
									"    console.log('‚ùå Failed to get records');",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/table/{{schemaName}}/data/project/{{projectUuid}}",
							"host": ["{{baseUrl}}"],
							"path": ["table", "{{schemaName}}", "data", "project", "{{projectUuid}}"]
						},
						"description": "üéØ Retrieves all records from the dynamic table to verify everything works"
					}
				}
			],
			"description": "üöÄ AUTOMATED TEST FLOW\n\nRun these requests in order to test your complete system:\n1Ô∏è‚É£ Register test user\n2Ô∏è‚É£ Get JWT authentication token\n3Ô∏è‚É£ Create a project\n4Ô∏è‚É£ Create dynamic table\n5Ô∏è‚É£ Insert test data\n6Ô∏è‚É£ Retrieve all records\n\n‚úÖ Each step automatically sets up variables for the next step!"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if it's about to expire",
					"const token = pm.collectionVariables.get('accessToken');",
					"if (!token) {",
					"    console.log('No access token found. Please get a token first.');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Handle 401 responses",
					"if (pm.response.code === 401) {",
					"    console.log('Unauthorized. Please check your access token.');",
					"}"
				]
			}
		}
	]
}
